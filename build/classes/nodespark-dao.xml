<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- for hibernate -->
	
	<!-- 扫描com.nodespark.dao包下所有标注@Repository的DAO组件 -->
    <context:component-scan base-package="com.ecommerce.common.redis"/>
    
    <!-- 引入定义JDBC连接的属性文件 
    <context:property-placeholder location="classpath:jdbc.properties"/>
    #mongo加载资源文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" /> 
	</bean>
	
	<!-- 
	
	定义一个数据源，使用dbcp,是依赖Jakarta commons-pool对象池机制的数据库连接池。
	必须包含 commons-pool.jar 
	      commons-dbcp.jar 
	 这个连接池有很多参数可以设置，比如maxActive最大活动连接，如果设置为负数，表示不限制 
	 
	 -->
	      
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
	    p:driverClassName="${jdbc.driverClassName}"
	    p:url="${jdbc.url}"
	    p:username="${jdbc.username}"
	    p:password="${jdbc.password}" />
	
	<!-- 定义hibernate的session工厂  -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	    <property name="packagesToScan"> <!-- 扫描基于JPA注解PO类目录  -->
            <list>
                <value>com.nodespark.domain</value>
            </list>
        </property>
		 
				
		<!-- 指定hibernate的属性信息  -->

					<!-- 指定数据库的类型为  
						MySQL             org.hibernate.dialect.MySQLDialect 
						SQL Server2005    org.hibernate.dialect.SQLServer2005Dialect
						Oracle9i          org.hibernate.dialect.Oracle9iDialect
					http://blog.sina.com.cn/s/blog_65f22a050101193p.html
					-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect"> 
					org.hibernate.dialect.SQLServerDialect
				</prop>
				
				<prop key="hibernate.cache.use_second_level_cache"> 
					false
				</prop>
				
				<prop key="hibernate.cache.use_query_cache">
				    false
				 </prop>
				
				<!-- 在提供数据库操作里，显示SQL，方便开发调试。在部署的时候应该将其改为false -->
				<prop key="hibernate.show_sql">true</prop>
				
				
				<!-- 使用EHCache缓存实现方案 
				此处启用了二级缓存，通过provider_class指定了缓存实现类。

				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				-->
			</props>
		</property>

		 
		
		<!-- 配置缓存策略 
		缓存区的分配使用：
		freqChangeRegion 缓存区 用于数字较大，较易发生改变的类。
		fixedRegion      缓存区 这个缓存区使用的对象永不过期，且使用内存缓存。
		
		<property name="entityCacheStrategies">
			<props>
			-->
				<!--  <prop key="com.nodespark.domain.Board">nonstrict-read-write,fixedRegion</prop>-->
				<!--<prop key="com.nodespark.domain.user">nonstrict-read-write,freqChangeRegion</prop>-->
				<!--<prop key="com.nodespark.domain.Topic">read-write,freqChangeRegion</prop> -->
				<!--<prop key="com.nodespark.domain.Post">read-write,freqChangeRegion</prop>-->
				<!--
			</props>
		</property>
		-->
	</bean>
	
	<!-- 定义hibernate模板 -->
	<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate3.HibernateTemplate"
		 p:sessionFactory-ref="sessionFactory" />
		 
		 
    <!-- for spring mvc jdbc -->
	<!-- ////////////////////////////////////// -->
    	 <bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
			<constructor-arg><ref bean="dataSource"/></constructor-arg>
		 </bean> 
     
     	 <!-- 看了spring源码，该 org.springframework.jdbc.core.JdbcTemplate类的继承类有dataSource属性，所以可以属性注入-->
         <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	        <property name="dataSource">
	            <ref bean="dataSource"/>
	        </property>
         </bean>
       <!-- ////////////////////////////////////// --> 
</beans>